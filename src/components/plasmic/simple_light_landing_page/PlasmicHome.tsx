// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qz8RZNbEpApDh4AbPHEGbs
// Component: TC3X2fP_G4iWwV
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: p3dZKyTqlfz3uo/component
import TopSection from "../../TopSection" // plasmic-import: JQSuKUKYvDIHlu/component
import Section from "../../Section" // plasmic-import: jD2vOiCCxRDWBU/component
import FeatureCard from "../../FeatureCard" // plasmic-import: C5PGxwYR786ONF/component
import Testimonial from "../../Testimonial" // plasmic-import: luSlPCQot8utWc/component
import HomeCta from "../../HomeCta" // plasmic-import: Mnr7gzWjzRaTAZ/component
import Footer from "../../Footer" // plasmic-import: _eGqY2jCOfhYgO/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: cUnl2He_iVdlaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_simple_light_landing_page.module.css" // plasmic-import: qz8RZNbEpApDh4AbPHEGbs/projectcss
import * as sty from "./PlasmicHome.module.css" // plasmic-import: TC3X2fP_G4iWwV/css

import LightningIcon from "./icons/PlasmicIcon__Lightning" // plasmic-import: xS4NSiV83PGJ5N/icon
import HammerIcon from "./icons/PlasmicIcon__Hammer" // plasmic-import: 0TE9FkobM9NdRS/icon
import PencilIcon from "./icons/PlasmicIcon__Pencil" // plasmic-import: z6Kf7Oh3bHVi-y/icon
import SwapIcon from "./icons/PlasmicIcon__Swap" // plasmic-import: q09YEyK2LNSDlc/icon
import SlotIcon from "./icons/PlasmicIcon__Slot" // plasmic-import: 1nDGjKxF3QZ70T/icon
import CycleIcon from "./icons/PlasmicIcon__Cycle" // plasmic-import: 6iXBgON4aAM04B/icon
import FacebookLogoIcon from "./icons/PlasmicIcon__FacebookLogo" // plasmic-import: h6euZa2oyRB1Th/icon
import TinderLogoIcon from "./icons/PlasmicIcon__TinderLogo" // plasmic-import: kT3htSxeHayGFN/icon
import AirbnbLogoIcon from "./icons/PlasmicIcon__AirbnbLogo" // plasmic-import: wAbOYph6LqFl8P/icon
import HubspotLogoIcon from "./icons/PlasmicIcon__HubspotLogo" // plasmic-import: pvt2rVTpL0Ueya/icon
import AmazonLogoIcon from "./icons/PlasmicIcon__AmazonLogo" // plasmic-import: CwZ2gYE68pc98p/icon
import simpleProjectQp7GFdXKzdoQl from "./images/simpleProject.png" // plasmic-import: qp7gFd-xKZDOQl/picture
import taskLYGpxyTfRh8Mi2 from "./images/task.png" // plasmic-import: lYGpxyTfRh8mi2/picture

export type PlasmicHome__VariantMembers = {}

export type PlasmicHome__VariantsArgs = {}
type VariantPropType = keyof PlasmicHome__VariantsArgs
export const PlasmicHome__VariantProps = new Array<VariantPropType>()

export type PlasmicHome__ArgsType = {}
type ArgPropType = keyof PlasmicHome__ArgsType
export const PlasmicHome__ArgProps = new Array<ArgPropType>()

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">
  header?: p.Flex<typeof Header>
  topSection?: p.Flex<typeof TopSection>
  testimonial?: p.Flex<typeof Testimonial>
  homeCta?: p.Flex<typeof HomeCta>
  footer?: p.Flex<typeof Footer>
}

export interface DefaultHomeProps {
  className?: string
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs
  args: PlasmicHome__ArgsType
  overrides: PlasmicHome__OverridesType
  dataFetches?: PlasmicHome__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__gEg3)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__cskxC)}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header)}
              />

              <TopSection
                data-plasmic-name={"topSection"}
                data-plasmic-override={overrides.topSection}
                className={classNames("__wab_instance", sty.topSection)}
              />

              <Section
                className={classNames("__wab_instance", sty.section__y4Oob)}
                subtitle={
                  "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                }
                title={"Explore the solutions"}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__hQaXm)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__wOib8)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__k83Ja
                    )}
                  >
                    {"Powerful suite of tools"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___6MBAp
                    )}
                  >
                    {
                      "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa."
                    }
                  </div>

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard___9SyT2
                    )}
                    description={
                      "Taking collaboration to the next level with security and administrative features built for teams"
                    }
                    iconBack={
                      <LightningIcon
                        className={classNames(defaultcss.all, sty.svg__rf1EM)}
                        role={"img"}
                      />
                    }
                    long={"long" as const}
                    title={"Building the Simple ecosystem"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard___4JjqZ
                    )}
                    description={
                      "Taking collaboration to the next level with security and administrative features built for teams"
                    }
                    iconBack={
                      <HammerIcon
                        className={classNames(defaultcss.all, sty.svg__cdTgi)}
                        role={"img"}
                      />
                    }
                    long={"long" as const}
                    title={"Building the Simple Ecosystem"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__caXYh
                    )}
                    description={
                      "Taking collaboration to the next level with security and administrative features built for teams"
                    }
                    iconBack={
                      <PencilIcon
                        className={classNames(defaultcss.all, sty.svg__xQbBz)}
                        role={"img"}
                      />
                    }
                    long={"long" as const}
                    title={"Building the Simple Ecosystem"}
                  />
                </p.Stack>

                <div className={classNames(defaultcss.all, sty.box__s472Y)}>
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__jZ710)}
                    role={"img"}
                    src={simpleProjectQp7GFdXKzdoQl}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__iJqet)}
                    role={"img"}
                    src={taskLYGpxyTfRh8Mi2}
                  />
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(defaultcss.all, sty.box___2FAkE)}>
            <div className={classNames(defaultcss.all, sty.box___7IMs6)} />

            <div className={classNames(defaultcss.all, sty.box__vaak)}>
              <div className={classNames(defaultcss.all, sty.box__j8RAk)}>
                <Section
                  className={classNames("__wab_instance", sty.section__hOGbm)}
                  subtitle={
                    "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat."
                  }
                  title={"How Simple works"}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box___3Wk)}
                >
                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__gcFwU
                    )}
                    description={
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                    iconFront={
                      <SwapIcon
                        className={classNames(defaultcss.all, sty.svg__owXrg)}
                        role={"img"}
                      />
                    }
                    title={"Initial Contact"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__vrRgl
                    )}
                    description={
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                    iconFront={
                      <SlotIcon
                        className={classNames(defaultcss.all, sty.svg__xlXp2)}
                        role={"img"}
                      />
                    }
                    title={"Discovery Session"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__kivds
                    )}
                    description={
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                    iconFront={
                      <CycleIcon
                        className={classNames(defaultcss.all, sty.svg__o7JTq)}
                        role={"img"}
                      />
                    }
                    title={"Contracting"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard___6Oama
                    )}
                    description={
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                    iconFront={
                      <HammerIcon
                        className={classNames(defaultcss.all, sty.svg__isMF)}
                        role={"img"}
                      />
                    }
                    title={"Fast Prototyping"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard___5COqj
                    )}
                    description={
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                    iconFront={
                      <PencilIcon
                        className={classNames(defaultcss.all, sty.svg___33SPi)}
                        role={"img"}
                      />
                    }
                    title={"Design Phase"}
                  />

                  <FeatureCard
                    className={classNames(
                      "__wab_instance",
                      sty.featureCard__nmchb
                    )}
                    description={
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                    iconFront={
                      <LightningIcon
                        className={classNames(defaultcss.all, sty.svg__vpOOr)}
                        role={"img"}
                      />
                    }
                    title={"Develop & Launch"}
                  />
                </p.Stack>
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.box__pvyL5)} />
          </div>

          <div className={classNames(defaultcss.all, sty.box__w7Iy4)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__hLko2)}
            >
              <Section
                className={classNames("__wab_instance", sty.section__wnsWe)}
                subtitle={
                  "Arcu cursus vitae congue mauris rhoncus viverra nibh cras pulvinar mattis blandit libero cursus mattis."
                }
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__rr2Tn)}
              >
                <FacebookLogoIcon
                  className={classNames(defaultcss.all, sty.svg__xi77R)}
                  role={"img"}
                />

                <TinderLogoIcon
                  className={classNames(defaultcss.all, sty.svg__lgDWv)}
                  role={"img"}
                />

                <AirbnbLogoIcon
                  className={classNames(defaultcss.all, sty.svg__tUmdq)}
                  role={"img"}
                />

                <HubspotLogoIcon
                  className={classNames(defaultcss.all, sty.svg__dnaLs)}
                  role={"img"}
                />

                <AmazonLogoIcon
                  className={classNames(defaultcss.all, sty.svg__i4Djk)}
                  role={"img"}
                />
              </p.Stack>

              <Testimonial
                data-plasmic-name={"testimonial"}
                data-plasmic-override={overrides.testimonial}
                className={classNames("__wab_instance", sty.testimonial)}
              />

              <HomeCta
                data-plasmic-name={"homeCta"}
                data-plasmic-override={overrides.homeCta}
                className={classNames("__wab_instance", sty.homeCta)}
              />

              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer)}
              />
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "header", "topSection", "testimonial", "homeCta", "footer"],
  header: ["header"],
  topSection: ["topSection"],
  testimonial: ["testimonial"],
  homeCta: ["homeCta"],
  footer: ["footer"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  header: typeof Header
  topSection: typeof TopSection
  testimonial: typeof Testimonial
  homeCta: typeof HomeCta
  footer: typeof Footer
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicHome__VariantsArgs
  args?: PlasmicHome__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicHome__Fetches
} & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicHome__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHome"
  } else {
    func.displayName = `PlasmicHome.${nodeName}`
  }
  return func
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    topSection: makeNodeComponent("topSection"),
    testimonial: makeNodeComponent("testimonial"),
    homeCta: makeNodeComponent("homeCta"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
  }
)

export default PlasmicHome
/* prettier-ignore-end */
