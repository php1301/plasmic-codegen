// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qz8RZNbEpApDh4AbPHEGbs
// Component: _eGqY2jCOfhYgO
import * as React from "react"

import { Link, GatsbyLinkProps as LinkProps } from "gatsby"

import * as p from "@plasmicapp/react-web"
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web"
import IconLink from "../../IconLink" // plasmic-import: 6ZlhkOhYrokvL0/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen" // plasmic-import: cUnl2He_iVdlaC/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_simple_light_landing_page.module.css" // plasmic-import: qz8RZNbEpApDh4AbPHEGbs/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: _eGqY2jCOfhYgO/css

import LogoIcon from "./icons/PlasmicIcon__Logo" // plasmic-import: 8VlrBX2Y1HfDp0/icon
import IconIcon from "./icons/PlasmicIcon__Icon" // plasmic-import: 0v2hQIIXuTUkbp/icon
import TwitterIconIcon from "./icons/PlasmicIcon__TwitterIcon" // plasmic-import: 4wxKOQGxBYx0ok/icon
import GithubIconIcon from "./icons/PlasmicIcon__GithubIcon" // plasmic-import: NoUqWYFVtn9n26/icon
import FacebookIconIcon from "./icons/PlasmicIcon__FacebookIcon" // plasmic-import: pp2sGqvmlCw8Lb/icon

export type PlasmicFooter__VariantMembers = {}

export type PlasmicFooter__VariantsArgs = {}
type VariantPropType = keyof PlasmicFooter__VariantsArgs
export const PlasmicFooter__VariantProps = new Array<VariantPropType>()

export type PlasmicFooter__ArgsType = {}
type ArgPropType = keyof PlasmicFooter__ArgsType
export const PlasmicFooter__ArgProps = new Array<ArgPropType>()

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">
  textbox?: p.Flex<"input">
  button?: p.Flex<"button">
}

export interface DefaultFooterProps {
  className?: string
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs
  args: PlasmicFooter__ArgsType
  overrides: PlasmicFooter__OverridesType
  dataFetches?: PlasmicFooter__Fetches
  forNode?: string
}) {
  const { variants, args, overrides, forNode, dataFetches } = props

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  })

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__rObLf)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__yaYdS)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__dux1V)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__exmMt)}
            icon={
              <LogoIcon
                className={classNames(defaultcss.all, sty.svg__o9Lt9)}
                role={"img"}
              />
            }
          />

          <div className={classNames(defaultcss.all, sty.box__gfp5T)}>
            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link___90Sdz
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Terms"}
            </p.PlasmicLink>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__msYzL
              )}
            >
              {" Â· "}
            </div>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link___7X4Ds
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Privacy"}
            </p.PlasmicLink>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__zxyj4)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__uu3WO)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__qANwR
              )}
            >
              {"Products"}
            </div>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__jJhId
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Web Studio"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__rEzeN
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"DynamicBox Flex"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__gAjij
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Programming Forms"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__zg8Vm
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Integrations"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__mrExJ
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Command-line"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__s3Ub)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___8HubW
              )}
            >
              {"Resources"}
            </div>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__rtJzO
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Documentation"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__j2Kg
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Tutorials & Guides"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__hYXhO
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Blog"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__klbCt
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Support Center"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link___7NaLo
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Partners"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__jIvLo)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__laIxN
              )}
            >
              {"Company"}
            </div>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__nDuX
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Home"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__bnEv3
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"About us"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__sucEe
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Company values"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__fcCAf
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Pricing"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.link__w6Xav
              )}
              component={Link}
              href={"#" as const}
              platform={"gatsby"}
            >
              {"Privacy policy"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box___2Kx5X)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__bKw
              )}
            >
              {"Subscribe"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__uwJ1
              )}
            >
              {"Get the latest news and articles to your inbox every month."}
            </div>

            <div className={classNames(defaultcss.all, sty.box__jSnSo)}>
              <input
                data-plasmic-name={"textbox"}
                data-plasmic-override={overrides.textbox}
                className={classNames(defaultcss.input, sty.textbox)}
                placeholder={"Your email" as const}
                size={1 as const}
                type={"text" as const}
                value={"" as const}
              />

              <div className={classNames(defaultcss.all, sty.box__ps5E4)} />

              <button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(defaultcss.button, sty.button)}
              >
                <IconIcon
                  className={classNames(defaultcss.all, sty.svg___2KYkP)}
                  role={"img"}
                />
              </button>
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.box__vXtj5)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__xSUcT)}
      >
        <div className={classNames(defaultcss.all, sty.box__bkXz6)}>
          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link___574PF
            )}
            component={Link}
            href={"https://cruip.com/" as const}
            platform={"gatsby"}
          >
            {"Designed by Cruip. "}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link__z9RBt
            )}
            component={Link}
            href={"https://www.plasmic.app/" as const}
            platform={"gatsby"}
          >
            {"Built in Plasmic. "}
          </p.PlasmicLink>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__uZbeY
            )}
          >
            {"All rights reserved."}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__oRtro)}
        >
          <IconLink
            className={classNames("__wab_instance", sty.iconLink__uyKjy)}
            icon={
              <TwitterIconIcon
                className={classNames(defaultcss.all, sty.svg__g3Dg9)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__hhozp)}
            icon={
              <GithubIconIcon
                className={classNames(defaultcss.all, sty.svg___60Rfp)}
                role={"img"}
              />
            }
          />

          <IconLink
            className={classNames("__wab_instance", sty.iconLink__tvHt)}
            icon={
              <FacebookIconIcon
                className={classNames(defaultcss.all, sty.svg__zElWg)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null
}

const PlasmicDescendants = {
  root: ["root", "textbox", "button"],
  textbox: ["textbox"],
  button: ["button"],
} as const
type NodeNameType = keyof typeof PlasmicDescendants
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number]
type NodeDefaultElementType = {
  root: "div"
  textbox: "input"
  button: "button"
}

type ReservedPropsType = "variants" | "args" | "overrides"
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicFooter__VariantsArgs
  args?: PlasmicFooter__ArgsType
  overrides?: NodeOverridesType<T>
  dataFetches?: PlasmicFooter__Fetches
} & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    const { dataFetches } = props

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
